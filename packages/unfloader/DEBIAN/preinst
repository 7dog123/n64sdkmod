#!/bin/bash -e

# Setup useful variables
D2XX_32="https://ftdichip.com/wp-content/uploads/2022/07/libftd2xx-x86_32-1.4.27.tgz"
D2XX_64="https://ftdichip.com/wp-content/uploads/2022/07/libftd2xx-x86_64-1.4.27.tgz"
OS_BIT=`getconf LONG_BIT`
EXECLOC=`pwd`
USERNAME=`echo ${SUDO_USER:-${USER}}`
UDEVUPDATED=false

. /usr/share/debconf/confmodule
db_version 2.0
db_capb backup

#DEBHELPER#

errmsg()
{
    echo >&2 ''
    echo >&2 "$@"
    echo >&2 "try 'dpkg-reconfigure debconf' to select a frontend other than noninteractive"
    echo >&2 ''
}

db_get unfloader/udev-64drive-answer
if [ "$RET" = "true" ]; then
    TARGET="30-64drive.rules"
    if [ -f "/etc/udev/rules.d/${TARGET}" ]; then
    echo "udev rules already setup for 64Drive. Skipping."
    else
    echo "ATTRS{product}==\"64drive USB device\", OWNER=\"${USERNAME}\"" >> ${TARGET}
    echo "ATTRS{product}==\"64drive USB device\", RUN{program}+=\"/bin/bash -c 'echo \$kernel > /sys/bus/usb/drivers/ftdi_sio/unbind'\"" >> ${TARGET}
    mv ${TARGET} "/etc/udev/rules.d"
    UDEVUPDATED=true
    fi
fi

db_get unfloader/udev-everdrive-answer
if [ "$RET" = "true" ]; then
    TARGET="30-everdrive.rules"
    if [ -f "/etc/udev/rules.d/${TARGET}" ]; then
    echo "udev rules already setup for EverDrive. Skipping."
    else
    echo "ATTRS{product}==\"FT245R USB FIFO\", OWNER=\"${USERNAME}\"" >> ${TARGET}
    echo "ATTRS{product}==\"FT245R USB FIFO\", RUN{program}+=\"/bin/bash -c 'echo \$kernel > /sys/bus/usb/drivers/ftdi_sio/unbind'\"" >> ${TARGET}
    mv ${TARGET} "/etc/udev/rules.d"
    UDEVUPDATED=true
    fi
fi

db_get unfloader/udev-sc64-answer
if [ "$RET" = "true" ]; then
    TARGET="30-sc64.rules"
    if [ -f "/etc/udev/rules.d/${TARGET}" ]; then
    echo "udev rules already setup for SC64. Skipping."
    else
    echo "ATTRS{product}==\"SC64\", ATTRS{manufacturer}==\"Polprzewodnikowy\", OWNER=\"${USERNAME}\"" >> ${TARGET}
    echo "ATTRS{product}==\"SC64\", ATTRS{manufacturer}==\"Polprzewodnikowy\", RUN{program}+=\"/bin/bash -c 'echo \$kernel > /sys/bus/usb/drivers/ftdi_sio/unbind'\"" >> ${TARGET}
    mv ${TARGET} "/etc/udev/rules.d"
    UDEVUPDATED=true
    fi
fi

# Reload udev rules
if [ ${UDEVUPDATED} = true ]; then
    echo 
    echo "udev rules updated. Reloading..."
    udevadm control --reload-rules && udevadm trigger > /dev/null 2>&1
    udevadm control --reload
    echo "Done!"
fi

# Check if D2XX should be installed
if [ -f "/opt/crashsdk/lib/libftd2xx.so" ]; then
    echo "D2XX driver is already installed, skipping installation."
else
    echo "Downloading D2XX ($OS_BIT bits)"
    TARGET=$D2XX_32
    if [ "$OS_BIT" = "64" ]; then
        TARGET=$D2XX_64
    fi

    # Create a working directory
    rm -rf libftd2xx
    mkdir -p libftd2xx
    cd libftd2xx

    # Download and extract it
    wget $TARGET
    tar -xf libftd2xx*

    # Move the library files to the right place, then create symbolic links
    find release/build -maxdepth 1 -type f | xargs -I {} cp {} /opt/crashsdk/lib
    cd /opt/crashsdk/lib
    ln -s libftd2xx.so.* libftd2xx.so
    chmod 0755 libftd2xx.so

    # Cleanup
    cd "$EXECLOC"
    rm -rf libftd2xx
    echo -e "D2XX driver successfully installed!"
fi
