# Autogenerated Linker Command File
#####################################
# WARNING
# DO NOT EDIT THIS FILE
# IF YOU CHANGE THIS FILE WHILE THE
# LCF GENERATOR PRELINKER IS ENABLED
# YOUR CHANGES WILL BE OVERWRITTEN
#####################################

MEMORY {

# This section is used to specify four things
# * The link address for each segment 
# * The ELF attributes 
#    (RX) for code
#    (RW) for data only
#    (RWX) for code and data
# * The maximum size of the segment unless you specify
#   LENGTH=0
# * You can optionally send the segment data to an
#   output file by appending "> filename" to the line
# The syntax is
#  <SEGNAME> <ELF attributes>: ORIGIN=0x<LINK ADDRESS>,
#     LENGTH=<LENGTH> > <FILENAME>
#     
	
code	(RX) : ORIGIN = 0x80000800, LENGTH = 0

}

SECTIONS {

# This area defines some linker variables that are used
# to keep track of the ROM address for each segment.

    _RomSize = 0x1000;
    _RomStart = _RomSize;

_codeSegmentRomStart = _RomSize;
..code :
{
	_codeSegmentStart = .;
		_codeSegmentTextStart = .;
			GROUP(ROOT)	(.text)
			. = ALIGN(0x10);
		_codeSegmentTextEnd = .;

		_codeSegmentDataStart = .;
			GROUP(ROOT)	(.data)
			GROUP(ROOT)	(.rodata)
			GROUP(ROOT)	(.vtables)
			
# Note: Currently, GP optimization cannot be used in the
# Nintendo 64. However, this section is here in case it
# becomes possible in the future.
#
# The .sbss section MUST follow the .sdata section and
# _gp must point 32K inside the .sdata section. This is
# required by the ABI. Note _gp is the only symbol known
# to the linker.  Do not change the name.

			. = ALIGN(0x10);
			_gp = . + 0x00008000;
			*	(.sdata)
			. = ALIGN(0x10);
		_codeSegmentDataEnd = .;

		_codeSegmentBssStart = .;
		_fsbss = .;
			*	(.sbss)
			*	(.scommon)
		_sbss_size = . - _fsbss;
		_fbss = .;
			GROUP(ROOT)	(.bss)
			GROUP(ROOT)	(COMMON)
			. = ALIGN(0x10);
		_codeSegmentBssEnd = .;
		_bss_size = . - _fsbss;

# set up the heap
		_heap_addr = .;

		_heap_size = 0x2000;
		_heap_end = _heap_addr + _heap_size;
		. = _heap_end;

# set up the stack
		_stack_size = 0x2000;
		_stack_addr = _heap_end + _stack_size;
		. = _stack_addr;

		_RomSize = _RomSize + _codeSegmentDataEnd - _codeSegmentTextStart;
		_codeSegmentRomEnd = _RomSize;

	_codeSegmentBssSize = _codeSegmentBssEnd - _codeSegmentBssStart;
	_codeSegmentEnd = .;

} > code


    _RomEnd = _RomSize;
}
